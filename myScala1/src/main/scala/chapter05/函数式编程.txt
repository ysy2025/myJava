基础
函数的定义和声明
函数运行机制
递归
过程
惰性函数和异常


高阶
值
值函数(函数字面量)
高阶函数
闭包
应用函数
curry函数

scala中的函数式编程和面向对象编程是融合的;

scala中,方法和函数几乎可以等同;定义,使用,运行机制都一样;但是函数的使用方法更加灵活

函数式编程是从编程方式(范式)的角度来谈的;支持函数的多种使用方式
函数的创建不依赖于类或者对象;
函数可以作为函数的参数使用;亦可以将函数赋值给一个变量.



函数和方法的区别
1) 核心概念
(1)为完成某一功能的程序语句的集合，称为函数。
(2)类中的函数称之方法。
2) 案例实操
(1) Scala 语言可以在任何的语法结构中声明任何的语法
(2)函数没有重载和重写的概念；方法可以进行重载和重写

函数调用的机制
函数执行的几个原则:
在编译期底层,当执行一个函数/方法时,就会开辟一个新的方法栈
传入的参数都按照val处理
每个栈的空间都是独立的,数据也是独立的


递归

函数的注意事项和细节
函数的形参列表可以是多个,也可以没用;调用的时候可以不加(),如果没有参数的话
形参列表和返回值列表的数据类型可以是值类型和引用类型
scala中的函数可以根据函数载体最后一行代码,自行腿短返回值类型,因此可以省略return
scala可以自行腿短,所以省略return关键字的场合,返回值类型也可以省略;递归必须制定返回值类型
如果函数明确使用return关键字,那么函数返回不能使用自行腿短,必须明确返回类型;不写的时候会return()