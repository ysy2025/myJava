传统的基本工厂:
    修改代码可以接受,但是如果在其他的地方也有创建pizza的代码,就意味着,也需要修改,因此会有很多地方需要修改

简单工厂:
    基于基本工厂,将创建pizza对象,封装到一个类中,这样有新的pizza种类的时候,就只需要修改该类就可以了,其他有
    创建pizza对象的代码就不用修改了->简单工厂

    创建型模式,是工厂模式的一种;由一个工厂对象决定创建出哪一种产品类的实例
    是工厂模式中最简单实用的

    通过定义一个创建对象的类,由这个类封装实例化对象的行为
    开发中,如果用到到两的创建某类,某批对象的时候,就用工厂模式

    也叫静态工厂模式
    有些人会把SimpleFactory里面的方法直接写成静态的;类调用的时候就调用了.
    但是静态工厂只能建一个


工厂方法模式
    需求:披萨项目新需求:北京,希腊的披萨也可以分类,北京奶酪,北京胡椒;希腊奶酪,希腊胡椒...

    思路:
        简单工厂:加类!北京奶酪,北京胡椒,xxx
            无限扩张!
        项目的规模,软件的可维护性,可扩展性,都不友好

    思路2:工厂方法模式
        将披萨项目实例化的功能,抽象成一个方法,在不同口味点餐子类中具体实现
        定义一个创建对象的抽象方法,由子类决定要实例化的类,工厂方法模式的核心思想,是将对象的实例化,推迟到子类

抽象工厂模式:
    定义了一个interface,用于创建相关或者有以来关系的对象簇,而无需指明具体的类
    抽象工厂模式,可以将简单工厂模式和工厂方法模式进行整合
    从设计层面看,抽象工厂模式是对简单工厂模式的改进
    将工厂模式分拆成两层,absfactory,和具体实现的工厂子类->单个的简单工厂类

设计模式,先设计,再实践

将实例化对象的代码提取出来,放到一个类中统一管理和维护,达到和主项目的依赖关系的解耦合,提高项目的扩展和维护性
设计模式的依赖抽象原则
简单工厂->工厂方法->抽象工厂

创建对象实例的时候,不要直接 new 类,而是把这个new类对象的动作放到一个工厂的方法中,返回

不要让类继承具体类,而是继承抽象类,或者接口
不要覆盖基类中已经实现的方法