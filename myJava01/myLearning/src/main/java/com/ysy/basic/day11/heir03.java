package com.ysy.basic.day11;

/*
方法重写
子类继承父类,方法也可以重新写,直接覆盖


面试题:区分方法的重载和重写
重写(override)是子类对父类的允许访问的方法的实现过程进行重新编写, 返回值和形参都不能改变.即外壳不变,核心重写!
重载(overloading) 是在一个类里面,方法名字相同,而参数不同.返回类型可以相同也可以不同.

多态!


重写的规则
两重一不重
方法的声明: 权限修饰符 返回值类型 方法名(形参列表) throws 异常类型{方法体}

子类重写的方法名=父类被重写的方法名

子类重写的方法名的形参=父类被重写的方法的形参

子类重写的方法的权限修饰符>=父类的修饰符
    特殊情况,子类不能重写父类的private方法(private毕竟只能自己用)

子类重写的方法的返回值类型
    父类=void, 子类只能=void
    父类类型=A类,子类可以是A类或者A类的子类
        构造方法是没有返回值的!所以不算重写
    父类类型=基本数据类型,子类必须是相同的基本数据类型

针对异常的处理
    子类重写的方法抛出的异常类型<=父类抛出的异常类型

通常保持一样就行

子类和父类中的同名同参数的方法,要么都是非static(才能重写),要么都是static(静态方法没办法重写)
final, static, abstract,是其他类型的修饰符(可以理解成属性)
 */
public class heir03 {

    public static void main(String[] args) {
        PencilCase pencilCase = new PencilCase();

        pencilCase.draw();

        pencilCase.talk();
    }
}
