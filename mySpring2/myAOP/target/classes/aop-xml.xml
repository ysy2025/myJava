<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context-4.2.xsd
       http://www.springframework.org/schema/aop
       http://www.springframework.org/schema/aop/spring-aop.xsd">

    <!--
        基于注解的AOP的实现：
        1、将目标对象和切面交给IOC容器管理（注解+扫描）
        2、开启AspectJ的自动代理，为目标对象自动生成代理
        3、将切面类通过注解@Aspect标识
        通过<aop:aspectj-autoproxy /> 开启基于注解的AOP
        -->

    <context:component-scan base-package="com.ysy3.aop.xml"></context:component-scan>

    <aop:config>
        <!--配置切面类-->
            <aop:aspect ref="loggerAspect">
                <aop:pointcut id="pointCut" expression="execution(*com.ysy3.aop.xml.CalculatorImpl.*(..))"/>
                <aop:before method="beforeMethod" pointcut-ref="pointCut"></aop:before>
                <aop:after method="afterMethod" pointcut-ref="pointCut"></aop:after>
                <aop:after-returning method="afterReturningMethod" returning="result" pointcut-ref="pointCut"></aop:after-returning>
                <aop:after-throwing method="afterThrowingMethod" throwing="ex" pointcut-ref="pointCut"></aop:after-throwing>
            <aop:around method="aroundMethod" pointcut-ref="pointCut"></aop:around>
        </aop:aspect>
    </aop:config>
</beans>

