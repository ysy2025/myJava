场景模拟
计算器的场景


代理模式:
    通过提供一个代理类，让我们在调用目标方法的时候，不再是直接对目标方法进行调用，而是通过代理类间接调用。
    让不属于目标方法核心逻辑的代码从目标方法中剥离出来——解耦;剥离到代理类中.
    调用目标方法时先调用代理对象的方法，减少对目标方法的调用和打扰，同时让附加功能能够集中在一起也有利于统一维护。

    代理：将非核心逻辑剥离出来以后，封装这些非核心逻辑的类、对象、方法。
    目标：被代理“套用”了非核心逻辑代码的类、对象、方法。

    静态代理:1v1;一个代理类对应一个目标类

    静态代理确实实现了解耦，但是由于代码都写死了，完全不具备任何的灵活性。就拿日志功能来
    说，将来其他地方也需要附加日志，那还得再声明更多个静态代理类，那就产生了大量重复的代
    码，日志功能还是分散的，没有统一管理。


AOP（Aspect Oriented Programming）是一种设计思想，是软件设计领域中的面向切面编程，它是面
向对象编程的一种补充和完善，它以通过预编译方式和运行期动态代理方式实现在不修改源代码的情况
下给程序动态统一添加额外功能的一种技术.